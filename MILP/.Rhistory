pain_dropped$PAT_RACE <- as.factor(pain_dropped$PAT_RACE)
pain_dropped$MEDICAID_BIN <- as.factor(pain_dropped$MEDICAID_BIN)
pain_mice_10iter <- mice(pain_dropped, m = 5, maxit = 10, seed = 123)
plot(pain_mice_10iter)
library(ggmice)
plot_trace(pain_mice_10iter)
pain_mice <- mice(pain_dropped, m = 5, seed = 123)
imputed1 <- mice::complete(pain_mice,1)
imputed1 %>%
group_by(PAIN_INTENSITY_AVERAGE) %>%
summarize("Average Mental Health Score" = mean(GH_MENTAL_SCORE), "Average Physical Health Score" = mean(GH_PHYSICAL_SCORE)) %>%
rename("Average Pain Intensity" = PAIN_INTENSITY_AVERAGE) %>%
kable(booktabs = TRUE, caption = "Average Mental and Physical Health Scores for Each Pain Intensity Level in One of the Imputed Data Sets") %>%
kable_styling(full_width = TRUE, latex_options = "hold_position")
# An empty dataset to store results from each of the 5 datasets
imputed_means_all = matrix(ncol = 6)
for (i in 1:5){
imputed <- mice::complete(pain_mice,i)
imputed_means <- imputed %>%
group_by(PAIN_INTENSITY_AVERAGE)%>%
summarize(avg_mental_health_score = mean(GH_MENTAL_SCORE),
n_level = n(),
MH_score_se = sd(GH_MENTAL_SCORE)/sqrt(n_level),
avg_physical_health_score = mean(GH_PHYSICAL_SCORE),
PH_score_se = sd(GH_PHYSICAL_SCORE)/sqrt(n_level))
imputed_means_all = rbind(imputed_means_all,as.matrix(imputed_means))
}
imputed_means_all = as.data.frame(imputed_means_all[-1,])
# Calculate estimates and pooled se
pain_imputed_means_overall <- imputed_means_all %>%
group_by(PAIN_INTENSITY_AVERAGE) %>%
summarize(W_MH = sum(MH_score_se^2)/5,
W_PH = sum(PH_score_se^2)/5,
overall_mean_MH_score = mean(avg_mental_health_score),
overall_mean_PH_score = mean(avg_physical_health_score),
B_MH = sum((avg_mental_health_score-overall_mean_MH_score)^2)/4,
B_PH = sum((avg_physical_health_score-overall_mean_PH_score)^2)/4,
se_MH_pooled = sqrt(W_MH + B_MH + B_MH/5 ),
se_PH_pooled = sqrt(W_PH + B_PH +B_PH/5))
pain_imputed_means_overall
pain_imputed_means_overall_longer <- pivot_longer(pain_imputed_means_overall,
cols = c("overall_mean_MH_score",
"overall_mean_PH_score"),
names_to = "mean_type",
values_to = "mean_value")
pain_imputed_means_overall_longer$se_pooled <- ifelse(pain_imputed_means_overall_longer$mean_type == "overall_mean_MH_score", pain_imputed_means_overall_longer$se_MH_pooled, pain_imputed_means_overall_longer$se_PH_pooled)
pain_imputed_means_overall_longer <- pain_imputed_means_overall_longer %>%
dplyr::select(c(1,8,9,10)) %>%
mutate(cint_low = mean_value-(1.96*se_pooled), cint_high = mean_value+(1.96*se_pooled))
# draw plots
ggplot(data = pain_imputed_means_overall_longer, aes(x = PAIN_INTENSITY_AVERAGE, y = mean_value, color = mean_type, ymin = cint_low, ymax = cint_high)) +
geom_line() +
geom_point() +
geom_errorbar() +
scale_color_discrete(name = "Score Type", labels = c("MH score", "PH score")) +
labs(x = "Average Pain Intensity", y = "Mean Score", title = "Figure 1: Mean Mental Health and Physical Health Scores at each Average Pain Intensity Level") +
theme(plot.title = element_text(size = 10))
# draw plots
ggplot(data = pain_imputed_means_overall_longer, aes(x = PAIN_INTENSITY_AVERAGE, y = mean_value, color = mean_type, ymin = cint_low, ymax = cint_high)) +
geom_line(aes(position = position_dodge(0.1))) +
geom_point() +
geom_errorbar(aes(width = 0.2, position = position_dodge(0.1))) +
scale_color_discrete(name = "Score Type", labels = c("MH score", "PH score")) +
labs(x = "Average Pain Intensity", y = "Mean Score", title = "Figure 1: Mean Mental Health and Physical Health Scores at each Average Pain Intensity Level") +
theme(plot.title = element_text(size = 10))
# draw plots
ggplot(data = pain_imputed_means_overall_longer, aes(x = PAIN_INTENSITY_AVERAGE, y = mean_value, color = mean_type, ymin = cint_low, ymax = cint_high)) +
geom_line(position = position_dodge(0.1)) +
geom_point() +
geom_errorbar(aes(width = 0.2, position = position_dodge(0.1))) +
scale_color_discrete(name = "Score Type", labels = c("MH score", "PH score")) +
labs(x = "Average Pain Intensity", y = "Mean Score", title = "Figure 1: Mean Mental Health and Physical Health Scores at each Average Pain Intensity Level") +
theme(plot.title = element_text(size = 10))
# draw plots
ggplot(data = pain_imputed_means_overall_longer, aes(x = PAIN_INTENSITY_AVERAGE, y = mean_value, color = mean_type, ymin = cint_low, ymax = cint_high)) +
geom_line(position = position_dodge(0.1)) +
geom_point() +
geom_errorbar(aes(position = position_dodge(0.1))) +
scale_color_discrete(name = "Score Type", labels = c("MH score", "PH score")) +
labs(x = "Average Pain Intensity", y = "Mean Score", title = "Figure 1: Mean Mental Health and Physical Health Scores at each Average Pain Intensity Level") +
theme(plot.title = element_text(size = 10))
# draw plots
ggplot(data = pain_imputed_means_overall_longer, aes(x = PAIN_INTENSITY_AVERAGE, y = mean_value, color = mean_type, ymin = cint_low, ymax = cint_high)) +
geom_line(position = position_dodge(0.1)) +
geom_point() +
geom_errorbar(position = position_dodge(0.1)) +
scale_color_discrete(name = "Score Type", labels = c("MH score", "PH score")) +
labs(x = "Average Pain Intensity", y = "Mean Score", title = "Figure 1: Mean Mental Health and Physical Health Scores at each Average Pain Intensity Level") +
theme(plot.title = element_text(size = 10))
# draw plots
ggplot(data = pain_imputed_means_overall_longer, aes(x = PAIN_INTENSITY_AVERAGE, y = mean_value, color = mean_type, ymin = cint_low, ymax = cint_high)) +
geom_line(position = position_dodge(0.1)) +
geom_point() +
geom_errorbar(position = position_dodge(0.9)) +
scale_color_discrete(name = "Score Type", labels = c("MH score", "PH score")) +
labs(x = "Average Pain Intensity", y = "Mean Score", title = "Figure 1: Mean Mental Health and Physical Health Scores at each Average Pain Intensity Level") +
theme(plot.title = element_text(size = 10))
# draw plots
ggplot(data = pain_imputed_means_overall_longer, aes(x = PAIN_INTENSITY_AVERAGE, y = mean_value, color = mean_type, ymin = cint_low, ymax = cint_high)) +
geom_line(position = position_dodge(0.2)) +
geom_point() +
geom_errorbar(position = position_dodge(0.2)) +
scale_color_discrete(name = "Score Type", labels = c("MH score", "PH score")) +
labs(x = "Average Pain Intensity", y = "Mean Score", title = "Figure 1: Mean Mental Health and Physical Health Scores at each Average Pain Intensity Level") +
theme(plot.title = element_text(size = 10))
library(ompr) # Package for establish OMPR Model
library(ompr.roi) # Solver package
library(ROI.plugin.glpk) # Specific solver used
library(ROI.plugin.cplex)
# Testing run with smaller sample sized datasets
# Small data stored at small_data
files <- list.files("/Users/oscar/Documents/GitHub/Risk_Model_Research/MILP/small_data")
df <- read.csv(paste0("/Users/oscar/Documents/GitHub/Risk_Model_Research/MILP/small_data/",files[6]))
setwd("~/Documents/GitHub/Risk_Model_Research/MILP")
# Testing run with smaller sample sized datasets
# Small data stored at small_data
files <- list.files("/Users/oscar/Documents/GitHub/Risk_Model_Research/MILP/small_data")
df <- read.csv(paste0("/Users/oscar/Documents/GitHub/Risk_Model_Research/MILP/small_data/",files[6]))
# Testing run with smaller sample sized datasets
# Small data stored at small_data
files <- list.files("/Users/oscar/Documents/GitHub/Risk_Model_Research/MILP/small_data")
df <- read.csv(paste0("/Users/oscar/Documents/GitHub/Risk_Model_Research/MILP/small_data/",files[6]))
df <- df[1:5,]
# Set data matrix
y <- df[[1]]
X <- as.matrix(df[,2:ncol(df)])
# Warm start solution
n = nrow(X)
p = ncol(X)
(
df <- read.csv(paste0("/Users/oscar/Documents/GitHub/Risk_Model_Research/MILP/small_data/",files[6]))
df <- read.csv(paste0("/Users/oscar/Documents/GitHub/Risk_Model_Research/MILP/small_data/",files[6]))
df <- read.csv(paste0("/Users/oscar/Documents/GitHub/Risk_Model_Research/MILP/small_data/",files[6]))
# Testing run with smaller sample sized datasets
# Small data stored at small_data
files <- list.files("/Users/oscar/Documents/GitHub/Risk_Model_Research/MILP/small_data")
files
df <- read.csv(paste0("/Users/oscar/Documents/GitHub/Risk_Model_Research/MILP/small_data/",files[2]))
df <- df[1:5,]
# Set data matrix
y <- df[[1]]
X <- as.matrix(df[,2:ncol(df)])
df <- read.csv(paste0("/Users/oscar/Documents/GitHub/Risk_Model_Research/MILP/small_data/",files[2]))
# Set data matrix
y <- df[[1]]
X <- as.matrix(df[,2:ncol(df)])
# Warm start solution
n = nrow(X)
p = ncol(X)
M = 999999999 #
# Score Pool
SK_pool = c((-5*p) : (5*p)) # Determined by lb and ub of beta
#SK_pool <- SK_pool[SK_pool!=0]
# Probability pool
PI = seq(0,1,length=100) # Equally spaced between 0,1, length = 100
PI <- PI[-c(1,100)]
P
# Model description
MILP_V2 <- MILPModel() %>%
# Integer coefficients for attributes
add_variable(beta[j], j=1:p, type = 'integer',ub = 5, lb = -5) %>%
# Predicted Risk Score from the integer coefficients : ??? should we put constraints
add_variable(s[i], i= 1:n, type = 'integer') %>%
add_constraint(sum_expr(beta[j]*as.numeric(X[i,j]), j=1:p) == s[i], i=1:n) %>%
# Indicator of S_i = k, k: one potential score from the score pool
add_variable(z_ik[i,k], i=1:n, k=1:length(SK_pool), type = 'binary') %>%
add_constraint(sum_expr(z_ik[i,k], k = 1:length(SK_pool)) == 1, i=1:n) %>%
add_constraint(s[i] - SK_pool[k] <= M * (1-z_ik[i,k]), i=1:n,k=1:length(SK_pool)) %>%
add_constraint(s[i] - SK_pool[k] >= -M * (1-z_ik[i,k]), i=1:n,k=1:length(SK_pool)) %>%
# Objective Function
set_objective(-sum_expr(y[i] * log(PI[l]) * p_il[i,l] + (1-y[i]) * log(1-PI[l]) * p_il[i,l],i=1:n, l=1:length(PI)), sense = "min") %>%
solve_model(with_ROI(solver = "glpk"))
library(ompr) # Package for establish OMPR Model
library(ompr.roi) # Solver package
library(ROI.plugin.glpk) # Specific solver used
library(ROI.plugin.cplex)
library(ompr) # Package for establish OMPR Model
library(ompr.roi) # Solver package
library(ROI.plugin.glpk) # Specific solver used
#library(ROI.plugin.cplex)
library(tidyverse)
#library(Rcplex)
MILP_V2 <- MILPModel() %>%
# Integer coefficients for attributes
add_variable(beta[j], j=1:p, type = 'integer',ub = 5, lb = -5) %>%
# Predicted Risk Score from the integer coefficients : ??? should we put constraints
add_variable(s[i], i= 1:n, type = 'integer') %>%
add_constraint(sum_expr(beta[j]*as.numeric(X[i,j]), j=1:p) == s[i], i=1:n) %>%
# Indicator of S_i = k, k: one potential score from the score pool
add_variable(z_ik[i,k], i=1:n, k=1:length(SK_pool), type = 'binary') %>%
add_constraint(sum_expr(z_ik[i,k], k = 1:length(SK_pool)) == 1, i=1:n) %>%
add_constraint(s[i] - SK_pool[k] <= M * (1-z_ik[i,k]), i=1:n,k=1:length(SK_pool)) %>%
add_constraint(s[i] - SK_pool[k] >= -M * (1-z_ik[i,k]), i=1:n,k=1:length(SK_pool)) %>%
# Objective Function
set_objective(-sum_expr(y[i] * log(PI[l]) * p_il[i,l] + (1-y[i]) * log(1-PI[l]) * p_il[i,l],i=1:n, l=1:length(PI)), sense = "min") %>%
solve_model(with_ROI(solver = "glpk"))
# Model description
MILP_V2 <- MILPModel() %>%
# Integer coefficients for attributes
add_variable(beta[j], j=1:p, type = 'integer',ub = 5, lb = -5) %>%
# Predicted Risk Score from the integer coefficients : ??? should we put constraints
add_variable(s[i], i= 1:n, type = 'integer') %>%
add_constraint(sum_expr(beta[j]*as.numeric(X[i,j]), j=1:p) == s[i], i=1:n) %>%
# Indicator of S_i = k, k: one potential score from the score pool
add_variable(z_ik[i,k], i=1:n, k=1:length(SK_pool), type = 'binary') %>%
add_constraint(sum_expr(z_ik[i,k], k = 1:length(SK_pool)) == 1, i=1:n) %>%
add_constraint(s[i] - SK_pool[k] <= M * (1-z_ik[i,k]), i=1:n,k=1:length(SK_pool)) %>%
add_constraint(s[i] - SK_pool[k] >= -M * (1-z_ik[i,k]), i=1:n,k=1:length(SK_pool)) %>%
# Objective Function
set_objective(0) %>%
solve_model(with_ROI(solver = "glpk"))
beta <- MILP_V2 %>% get_solution(beta[j])
beta
z
# First K for every i
zik <- MILP_V2 %>% get_solution(z_ik[i,k])
zik
X
# Testing run with smaller sample sized datasets
# Small data stored at small_data
files <- list.files("/Users/oscar/Documents/GitHub/Risk_Model_Research/MILP/sim_data")
files
# Testing run with smaller sample sized datasets
# Small data stored at small_data
files <- list.files("/Users/oscar/Documents/GitHub/Risk_Model_Research/sim_data")
files
# Testing run with smaller sample sized datasets
# Small data stored at small_data
files <- list.files("/Users/oscar/Documents/GitHub/Risk_Model_Research/sim_data")
df <- read.csv(paste0("/Users/oscar/Documents/GitHub/Risk_Model_Research/MILP/small_data/",files[13]))
df <- read.csv(paste0("/Users/oscar/Documents/GitHub/Risk_Model_Research/sim_data/",files[13]))
df
# Set data matrix
df <- df[1:200,]
View(df)
y <- df[[1]]
X <- as.matrix(df[,2:ncol(df)])
# Warm start solution
n = nrow(X)
p = ncol(X)
M = 999999999 #
# Score Pool
SK_pool = c((-5*p) : (5*p)) # Determined by lb and ub of beta
#SK_pool <- SK_pool[SK_pool!=0]
# Probability pool
PI = seq(0,1,length=100) # Equally spaced between 0,1, length = 100
PI <- PI[-c(1,100)]
# Model description
MILP_V2 <- MILPModel() %>%
# Integer coefficients for attributes
add_variable(beta[j], j=1:p, type = 'integer',ub = 5, lb = -5) %>%
# Predicted Risk Score from the integer coefficients : ??? should we put constraints
add_variable(s[i], i= 1:n, type = 'integer') %>%
add_constraint(sum_expr(beta[j]*as.numeric(X[i,j]), j=1:p) == s[i], i=1:n) %>%
# Indicator of S_i = k, k: one potential score from the score pool
add_variable(z_ik[i,k], i=1:n, k=1:length(SK_pool), type = 'binary') %>%
add_constraint(sum_expr(z_ik[i,k], k = 1:length(SK_pool)) == 1, i=1:n) %>%
add_constraint(s[i] - SK_pool[k] <= M * (1-z_ik[i,k]), i=1:n,k=1:length(SK_pool)) %>%
add_constraint(s[i] - SK_pool[k] >= -M * (1-z_ik[i,k]), i=1:n,k=1:length(SK_pool)) %>%
# Objective Function
set_objective(0) %>%
solve_model(with_ROI(solver = "glpk"))
beta <- MILP_V2 %>% get_solution(beta[j])
beta
View(X)
# First K for every i
zik <- MILP_V2 %>% get_solution(z_ik[i,k])
zik
X[1,]
SK_pool
s <- MILP_V2 %>% get_solution(s[i])
s
# Model description
MILP_V2 <- MILPModel() %>%
# Integer coefficients for attributes
add_variable(beta[j], j=1:p, type = 'integer',ub = 5, lb = -5) %>%
# Predicted Risk Score from the integer coefficients : ??? should we put constraints
add_variable(s[i], i= 1:n, type = 'integer') %>%
add_constraint(sum_expr(beta[j]*X[i,j], j=1:p) == s[i], i=1:n) %>%
# Indicator of S_i = k, k: one potential score from the score pool
add_variable(z_ik[i,k], i=1:n, k=1:length(SK_pool), type = 'binary') %>%
add_constraint(sum_expr(z_ik[i,k], k = 1:length(SK_pool)) == 1, i=1:n) %>%
add_constraint(s[i] - SK_pool[k] <= M * (1-z_ik[i,k]), i=1:n,k=1:length(SK_pool)) %>%
add_constraint(s[i] - SK_pool[k] >= -M * (1-z_ik[i,k]), i=1:n,k=1:length(SK_pool)) %>%
# Objective Function
set_objective(0) %>%
solve_model(with_ROI(solver = "glpk"))
X[1,2]
# Model description
MILP_V2 <- MIPModel() %>%
# Integer coefficients for attributes
add_variable(beta[j], j=1:p, type = 'integer',ub = 5, lb = -5) %>%
# Predicted Risk Score from the integer coefficients : ??? should we put constraints
add_variable(s[i], i= 1:n, type = 'integer') %>%
add_constraint(sum_expr(beta[j]*X[i,j], j=1:p) == s[i], i=1:n) %>%
# Indicator of S_i = k, k: one potential score from the score pool
add_variable(z_ik[i,k], i=1:n, k=1:length(SK_pool), type = 'binary') %>%
add_constraint(sum_expr(z_ik[i,k], k = 1:length(SK_pool)) == 1, i=1:n) %>%
add_constraint(s[i] - SK_pool[k] <= M * (1-z_ik[i,k]), i=1:n,k=1:length(SK_pool)) %>%
add_constraint(s[i] - SK_pool[k] >= -M * (1-z_ik[i,k]), i=1:n,k=1:length(SK_pool)) %>%
# Objective Function
set_objective(0) %>%
solve_model(with_ROI(solver = "glpk"))
# Model description
MILP_V2 <- MIPModel() %>%
# Integer coefficients for attributes
add_variable(beta[j], j=1:p, type = 'integer',ub = 5, lb = -5) %>%
# Predicted Risk Score from the integer coefficients : ??? should we put constraints
add_variable(s[i], i= 1:n, type = 'integer') %>%
add_constraint(sum_expr(beta[j]*X[i,j], j=1:p) == s[i], i=1:n) %>%
# Indicator of S_i = k, k: one potential score from the score pool
#add_variable(z_ik[i,k], i=1:n, k=1:length(SK_pool), type = 'binary') %>%
#add_constraint(sum_expr(z_ik[i,k], k = 1:length(SK_pool)) == 1, i=1:n) %>%
#add_constraint(s[i] - SK_pool[k] <= M * (1-z_ik[i,k]), i=1:n,k=1:length(SK_pool)) %>%
#add_constraint(s[i] - SK_pool[k] >= -M * (1-z_ik[i,k]), i=1:n,k=1:length(SK_pool)) %>%
# Objective Function
set_objective(0) %>%
solve_model(with_ROI(solver = "glpk"))
beta
s
# Model description
MILP_V2 <- MIPModel() %>%
# Integer coefficients for attributes
add_variable(beta[j], j=1:p, type = 'integer',ub = 5, lb = -5) %>%
# Predicted Risk Score from the integer coefficients : ??? should we put constraints
add_variable(s[i], i= 1:n, type = 'integer') %>%
add_constraint(sum_expr(beta[j]*X[i,j], j=1:p) - s[i] == o, i=1:n) %>%
# Indicator of S_i = k, k: one potential score from the score pool
#add_variable(z_ik[i,k], i=1:n, k=1:length(SK_pool), type = 'binary') %>%
#add_constraint(sum_expr(z_ik[i,k], k = 1:length(SK_pool)) == 1, i=1:n) %>%
#add_constraint(s[i] - SK_pool[k] <= M * (1-z_ik[i,k]), i=1:n,k=1:length(SK_pool)) %>%
#add_constraint(s[i] - SK_pool[k] >= -M * (1-z_ik[i,k]), i=1:n,k=1:length(SK_pool)) %>%
# Objective Function
set_objective(0) %>%
solve_model(with_ROI(solver = "glpk"))
# Model description
MILP_V2 <- MIPModel() %>%
# Integer coefficients for attributes
add_variable(beta[j], j=1:p, type = 'integer',ub = 5, lb = -5) %>%
# Predicted Risk Score from the integer coefficients : ??? should we put constraints
add_variable(s[i], i= 1:n, type = 'integer') %>%
add_constraint(sum_expr(beta[j]*X[i,j], j=1:p) - s[i] == 0, i=1:n) %>%
# Indicator of S_i = k, k: one potential score from the score pool
#add_variable(z_ik[i,k], i=1:n, k=1:length(SK_pool), type = 'binary') %>%
#add_constraint(sum_expr(z_ik[i,k], k = 1:length(SK_pool)) == 1, i=1:n) %>%
#add_constraint(s[i] - SK_pool[k] <= M * (1-z_ik[i,k]), i=1:n,k=1:length(SK_pool)) %>%
#add_constraint(s[i] - SK_pool[k] >= -M * (1-z_ik[i,k]), i=1:n,k=1:length(SK_pool)) %>%
# Objective Function
set_objective(0) %>%
solve_model(with_ROI(solver = "glpk"))
beta <- MILP_V2 %>% get_solution(beta[j])
beta
s <- MILP_V2 %>% get_solution(s[i])
s
library(ompr)
library(ompr.roi)
library(ROI.plugin.glpk) # Example solver
library(tidyverse)
# Load your data
file_path <- list.files("/Users/oscar/Documents/GitHub/Risk_Model_Research/MILP/data")
df <- read.csv(paste0("/Users/oscar/Documents/GitHub/Risk_Model_Research/MILP/data/",files[10]))
# Load your data
file <- list.files("/Users/oscar/Documents/GitHub/Risk_Model_Research/MILP/data")
file
# Load your data
file <- list.files("/Users/oscar/Documents/GitHub/Risk_Model_Research/MILP/data")
df <- read.csv(paste0("/Users/oscar/Documents/GitHub/Risk_Model_Research/MILP/data/",files[10]))
# Load your data
files <- list.files("/Users/oscar/Documents/GitHub/Risk_Model_Research/MILP/data")
df <- read.csv(paste0("/Users/oscar/Documents/GitHub/Risk_Model_Research/MILP/data/",files[10]))
# Preprocess the data
df <- df[1:20, 2:5]
View(df)
# Preprocess the data
df <- df[0:20, 2:5]
# Preprocess the data
df <- df[1:20, 1:5]
# Preprocess the data
df <- df[1:20, 1:5]
df <- read.csv(paste0("/Users/oscar/Documents/GitHub/Risk_Model_Research/MILP/data/",files[10]))
# Preprocess the data
df <- df[1:20, 1:5]
View(df)
y <- df[, 1]
X <- as.matrix(df[, -1])
View(X)
# Parameters
n <- nrow(X)
p <- ncol(X)
M <- 1000
SK_pool <- seq(-5 * p, 5 * p, 1)
PI <- seq(0.01, 0.99, length.out = 100)
model <- MIPModel() %>%
# Variable definitions
add_variable(beta[j], j = 1:p, type = "integer", lb = -5, ub = 5) %>%
add_variable(s[i], i = 1:n, type = "integer", lb = -10, ub = 10) %>%
add_variable(z_ik[i, k], i = 1:n, k = 1:length(SK_pool), type = "binary") %>%
add_variable(p_ik[i, k], i = 1:n, k = 1:length(SK_pool), type = "continuous", lb = 0.0001, ub = 0.9999) %>%
# Constraints
# Score constraint
add_constraint(sum_expr(beta[j] * X[i, j], j = 1:p) == s[i], i = 1:n) %>%
# Sum of z_ik for each i
add_constraint(sum_expr(z_ik[i, k], k = 1:length(SK_pool)) == 1, i = 1:n) %>%
# Linking s[i] to z_ik
add_constraint(s[i] - SK_pool[k] - M * (1 - z_ik[i, k]) <= 0, i = 1:n, k = 1:length(SK_pool)) %>%
add_constraint(s[i] - SK_pool[k] + M * (1 - z_ik[i, k]) >= 0, i = 1:n, k = 1:length(SK_pool)) %>%
# Linking p_ik to z_ik
add_constraint(p_ik[i, k] - PI[l] <= M * (1 - z_ik[i, k]), i = 1:n, k = 1:length(SK_pool), l = 1:length(PI)) %>%
add_constraint(p_ik[i, k] - PI[l] >= -M * (1 - z_ik[i, k]), i = 1:n, k = 1:length(SK_pool), l = 1:length(PI)) %>%
# Objective function (define as per your requirement)
set_objective(sum_expr(-y[i] * log(p_ik[i, k]) - (1 - y[i]) * log(1 - p_ik[i, k]), i = 1:n, k = SK_pool), "min")
model <- MIPModel() %>%
model <- MIPModel() %>%
library(ompr)
library(ompr.roi)
library(ROI.plugin.glpk) # Example solver
library(tidyverse)
# Load your data
files <- list.files("/Users/oscar/Documents/GitHub/Risk_Model_Research/MILP/data")
df <- read.csv(paste0("/Users/oscar/Documents/GitHub/Risk_Model_Research/MILP/data/",files[10]))
# Preprocess the data
df <- df[1:20, 1:5]
y <- df[, 1]
X <- as.matrix(df[, -1])
# Parameters
n <- nrow(X)
p <- ncol(X)
M <- 1000
SK_pool <- seq(-5 * p, 5 * p, 1)
PI <- seq(0.01, 0.99, length.out = 100)
# Assuming X, y, n, p, M, SK_pool, and PI are already defined
model <- MIPModel() %>%
# Variable definitions
add_variable(beta[j], j = 1:p, type = "integer", lb = -5, ub = 5) %>%
add_variable(z_ik[i, k], i = 1:n, k = 1:length(SK_pool), type = "binary") %>%
# Constraints
# Constraints
# Score constraint
add_constraint(sum_expr(beta[j] * X[i, j], j = 1:p) == s[i], i = 1:n) %>%
# Sum of z_ik for each i
library(ompr)
library(ompr.roi)
library(ROI.plugin.glpk) # Example solver
library(tidyverse)
# Load your data
files <- list.files("/Users/oscar/Documents/GitHub/Risk_Model_Research/MILP/data")
df <- read.csv(paste0("/Users/oscar/Documents/GitHub/Risk_Model_Research/MILP/data/",files[10]))
# Preprocess the data
df <- df[1:20, 1:5]
y <- df[, 1]
X <- as.matrix(df[, -1])
# Parameters
n <- nrow(X)
p <- ncol(X)
M <- 1000
SK_pool <- seq(-5 * p, 5 * p, 1)
PI <- seq(0.01, 0.99, length.out = 100)
# Assuming X, y, n, p, M, SK_pool, and PI are already defined
model <- MIPModel() %>%
# Variable definitions
add_variable(beta[j], j = 1:p, type = "integer", lb = -5, ub = 5) %>%
add_variable(s[i], i = 1:n, type = "integer", lb = -10, ub = 10) %>%
add_variable(z_ik[i, k], i = 1:n, k = 1:length(SK_pool), type = "binary") %>%
add_variable(p_ik[i, k], i = 1:n, k = 1:length(SK_pool), type = "continuous", lb = 0.0001, ub = 0.9999) %>%
# Constraints
# Score constraint
add_constraint(sum_expr(beta[j] * X[i, j], j = 1:p) == s[i], i = 1:n) %>%
# Sum of z_ik for each i
add_constraint(sum_expr(z_ik[i, k], k = 1:length(SK_pool)) == 1, i = 1:n) %>%
# Linking s[i] to z_ik
add_constraint(s[i] - SK_pool[k] - M * (1 - z_ik[i, k]) <= 0, i = 1:n, k = 1:length(SK_pool)) %>%
add_constraint(s[i] - SK_pool[k] + M * (1 - z_ik[i, k]) >= 0, i = 1:n, k = 1:length(SK_pool)) %>%
# Linking p_ik to z_ik
add_constraint(p_ik[i, k] - PI[l] <= M * (1 - z_ik[i, k]), i = 1:n, k = 1:length(SK_pool), l = 1:length(PI)) %>%
add_constraint(p_ik[i, k] - PI[l] >= -M * (1 - z_ik[i, k]), i = 1:n, k = 1:length(SK_pool), l = 1:length(PI)) %>%
# Objective function (define as per your requirement)
set_objective(sum_expr(-y[i] * log(p_ik[i, k]) - (1 - y[i]) * log(1 - p_ik[i, k]), i = 1:n, k = 1:length(SK_pool), "min"))
# Load your data
files <- list.files("/Users/oscar/Documents/GitHub/Risk_Model_Research/MILP/data")
df <- read.csv(paste0("/Users/oscar/Documents/GitHub/Risk_Model_Research/MILP/data/",files[10]))
# Preprocess the data
df <- df[1:20, 1:5]
y <- df[, 1]
X <- as.matrix(df[, -1])
# Parameters
n <- nrow(X)
p <- ncol(X)
M <- 1000
SK_pool <- seq(-5 * p, 5 * p, 1)
PI <- seq(0.01, 0.99, length.out = 100)
# Assuming X, y, n, p, M, SK_pool, and PI are already defined
model <- MIPModel() %>%
# Variable definitions
add_variable(beta[j], j = 1:p, type = "integer", lb = -5, ub = 5) %>%
add_variable(s[i], i = 1:n, type = "integer", lb = -10, ub = 10) %>%
add_variable(z_ik[i, k], i = 1:n, k = 1:length(SK_pool), type = "binary") %>%
add_variable(p_ik[i, k], i = 1:n, k = 1:length(SK_pool), type = "continuous", lb = 0.0001, ub = 0.9999) %>%
# Constraints
# Score constraint
add_constraint(sum_expr(beta[j] * X[i, j], j = 1:p) == s[i], i = 1:n) %>%
# Sum of z_ik for each i
add_constraint(sum_expr(z_ik[i, k], k = 1:length(SK_pool)) == 1, i = 1:n) %>%
# Linking s[i] to z_ik
add_constraint(s[i] - SK_pool[k] - M * (1 - z_ik[i, k]) <= 0, i = 1:n, k = 1:length(SK_pool)) %>%
add_constraint(s[i] - SK_pool[k] + M * (1 - z_ik[i, k]) >= 0, i = 1:n, k = 1:length(SK_pool)) %>%
# Linking p_ik to z_ik
add_constraint(p_ik[i, k] - PI[l] <= M * (1 - z_ik[i, k]), i = 1:n, k = 1:length(SK_pool), l = 1:length(PI)) %>%
add_constraint(p_ik[i, k] - PI[l] >= -M * (1 - z_ik[i, k]), i = 1:n, k = 1:length(SK_pool), l = 1:length(PI)) %>%
# Objective function (define as per your requirement)
set_objective(-sum_expr(y[i] * log(p_ik[i, k]) - (1 - y[i]) * log(1 - p_ik[i, k]), i = 1:n, k = 1:length(SK_pool), "min"))
View(df)
View(df)
